Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /response:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getModelResponse.Arn}/invocations
              responses: {}
          /{session}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteSession.Arn}/invocations
              responses: {}
            post:
              responses:
                '200':
                  description: default OK response
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiToStateMachineRole.Arn
                httpMethod: POST
                type: aws
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:states:action/StartExecution
                responses:
                  default:
                    statusCode: 200
                requestTemplates:
                  application/json: !Sub |-
                    {
                      "input": "$util.escapeJavaScript($input.json('$'))",
                      "name": "$context.requestId",
                      "stateMachineArn": "${StateMachine}"
                    }
          /response/{session}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getModelResponseFromSession.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  FormSession:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: step
          AttributeType: 'N'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: step
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  getTextFromImage:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getTextFromImage
      CodeUri: src/get-text-from-image
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
          AIINFORMIMAGEBUCKET_BUCKET_NAME: !Ref AIInformImageBucket
          AIINFORMIMAGEBUCKET_BUCKET_ARN: !GetAtt AIInformImageBucket.Arn
          OCR_SPACE_API_KEY: K81073658288957
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${AIInformImageBucket}
                - !Sub arn:${AWS::Partition}:s3:::${AIInformImageBucket}/*
  getTextFromImageLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getTextFromImage}
  AIInformWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-aiinformw-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  AIInformWebsiteBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AIInformWebsiteBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt AIInformWebsiteBucket.Arn
              - !Sub ${AIInformWebsiteBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  deleteSession:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteSession
      CodeUri: src/delete-session
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
      Events:
        ApiDELETEsession:
          Type: Api
          Properties:
            Path: /{session}
            Method: DELETE
            RestApiId: !Ref Api
  deleteSessionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteSession}
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: CreateSession
        States:
          CreateSession:
            Parameters:
              FunctionName: ${CreateSessionLambda}
              Payload.$: $
            Resource: arn:aws:states:::lambda:invoke
            Type: Task
            Next: GetTextFromImage
          GetTextFromImage:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${GetTextFromImage}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: EnrichModelRequest
          EnrichModelRequest:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${EnrichModelRequest}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: GetModelResponse
          GetModelResponse:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${GetModelResponse}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: PersistModelResponse
          PersistModelResponse:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: ${PersistModelResponse}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            End: true
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref createSession
        - LambdaInvokePolicy:
            FunctionName: !Ref getTextFromImage
        - LambdaInvokePolicy:
            FunctionName: !Ref enrichModelRequest
        - LambdaInvokePolicy:
            FunctionName: !Ref getModelResponse
        - LambdaInvokePolicy:
            FunctionName: !Ref persistModelResponse
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        CreateSessionLambda: !GetAtt createSession.Arn
        GetTextFromImage: !GetAtt getTextFromImage.Arn
        EnrichModelRequest: !GetAtt enrichModelRequest.Arn
        GetModelResponse: !GetAtt getModelResponse.Arn
        PersistModelResponse: !GetAtt persistModelResponse.Arn
      Events:
        ApiPUT:
          Type: Api
          Properties:
            Path: /
            Method: PUT
            RestApiId: !Ref Api
        ApiPUTsession:
          Type: Api
          Properties:
            Path: /{session}
            Method: PUT
            RestApiId: !Ref Api
        ApiPOSTsession:
          Type: Api
          Properties:
            Path: /{session}
            Method: POST
            RestApiId: !Ref Api
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: StateMachine
  getModelResponseFromSession:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getModelResponseFromSession
      CodeUri: src/get-model-response-from-session
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
      Events:
        ApiGETresponsesession:
          Type: Api
          Properties:
            Path: /response/{session}
            Method: GET
            RestApiId: !Ref Api
  getModelResponseFromSessionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getModelResponseFromSession}
  getModelResponse:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getModelResponse
      CodeUri: src/get-model-response
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETresponse:
          Type: Api
          Properties:
            Path: /response
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
          OPENROUTER_API_KEY: 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
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
  getModelResponseLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getModelResponse}
  createSession:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: createSession
      CodeUri: src/create-session
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
          AIINFORMIMAGEBUCKET_BUCKET_NAME: !Ref AIInformImageBucket
          AIINFORMIMAGEBUCKET_BUCKET_ARN: !GetAtt AIInformImageBucket.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${AIInformImageBucket}
                - !Sub arn:${AWS::Partition}:s3:::${AIInformImageBucket}/*
  createSessionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${createSession}
  enrichModelRequest:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: enrichModelRequest
      CodeUri: src/enrich-model-request
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
  enrichModelRequestLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${enrichModelRequest}
  persistModelResponse:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: persistModelResponse
      CodeUri: src/persist-model-response
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          FORMSESSION_TABLE_NAME: !Ref FormSession
          FORMSESSION_TABLE_ARN: !GetAtt FormSession.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FormSession
  persistModelResponseLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${persistModelResponse}
  AIInformImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-aiinformi-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  AIInformImageBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AIInformImageBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt AIInformImageBucket.Arn
              - !Sub ${AIInformImageBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  ApiToStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: !Sub apigateway.${AWS::URLSuffix}
      Policies:
        - PolicyName: ExecuteStateMachine
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt StateMachine.Arn